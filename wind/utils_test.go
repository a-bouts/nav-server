package wind

import "testing"

func TestTwa(t *testing.T) {

	tests := [][3]float64{
		[3]float64{0, 0, 0}, [3]float64{0, 45, 45}, [3]float64{0, 90, 90}, [3]float64{0, 135, 135}, [3]float64{0, 180, 180}, [3]float64{0, 225, -135}, [3]float64{0, 270, -90}, [3]float64{0, 315, -45},
		[3]float64{45, 0, -45}, [3]float64{45, 45, 0}, [3]float64{45, 90, 45}, [3]float64{45, 135, 90}, [3]float64{45, 180, 135}, [3]float64{45, 225, 180}, [3]float64{45, 270, -135}, [3]float64{45, 315, -90},
		[3]float64{90, 0, -90}, [3]float64{90, 45, -45}, [3]float64{90, 90, 0}, [3]float64{90, 135, 45}, [3]float64{90, 180, 90}, [3]float64{90, 225, 135}, [3]float64{90, 270, 180}, [3]float64{90, 315, -135},
		[3]float64{135, 0, -135}, [3]float64{135, 45, -90}, [3]float64{135, 90, -45}, [3]float64{135, 135, 0}, [3]float64{135, 180, 45}, [3]float64{135, 225, 90}, [3]float64{135, 270, 135}, [3]float64{135, 315, 180},
		[3]float64{180, 0, 180}, [3]float64{180, 45, -135}, [3]float64{180, 90, -90}, [3]float64{180, 135, -45}, [3]float64{180, 180, 0}, [3]float64{180, 225, 45}, [3]float64{180, 270, 90}, [3]float64{180, 315, 135},
		[3]float64{225, 0, 135}, [3]float64{225, 45, 180}, [3]float64{225, 90, -135}, [3]float64{225, 135, -90}, [3]float64{225, 180, -45}, [3]float64{225, 225, 0}, [3]float64{225, 270, 45}, [3]float64{225, 315, 90},
		[3]float64{270, 0, 90}, [3]float64{270, 45, 135}, [3]float64{270, 90, 180}, [3]float64{270, 135, -135}, [3]float64{270, 180, -90}, [3]float64{270, 225, -45}, [3]float64{270, 270, 0}, [3]float64{270, 315, 45},
		[3]float64{315, 0, 45}, [3]float64{315, 45, 90}, [3]float64{315, 90, 135}, [3]float64{315, 135, 180}, [3]float64{315, 180, -135}, [3]float64{315, 225, -90}, [3]float64{315, 270, -45}, [3]float64{315, 315, 0},
	}

	for _, test := range tests {
		twa := Twa(test[0], test[1])
		if twa != test[2] {
			t.Errorf("Twa(%.0f, %.0f) = (%.0f); want (%.0f)", test[0], test[1], twa, test[2])
		}
	}
}

func TestHeading(t *testing.T) {

	tests := [][3]float64{
		[3]float64{0, 0, 0}, [3]float64{0, 45, 45}, [3]float64{0, 90, 90}, [3]float64{0, 135, 135}, [3]float64{0, 180, 180}, [3]float64{0, 225, -135}, [3]float64{0, 270, -90}, [3]float64{0, 315, -45},
		[3]float64{45, 0, -45}, [3]float64{45, 45, 0}, [3]float64{45, 90, 45}, [3]float64{45, 135, 90}, [3]float64{45, 180, 135}, [3]float64{45, 225, 180}, [3]float64{45, 270, -135}, [3]float64{45, 315, -90},
		[3]float64{90, 0, -90}, [3]float64{90, 45, -45}, [3]float64{90, 90, 0}, [3]float64{90, 135, 45}, [3]float64{90, 180, 90}, [3]float64{90, 225, 135}, [3]float64{90, 270, 180}, [3]float64{90, 315, -135},
		[3]float64{135, 0, -135}, [3]float64{135, 45, -90}, [3]float64{135, 90, -45}, [3]float64{135, 135, 0}, [3]float64{135, 180, 45}, [3]float64{135, 225, 90}, [3]float64{135, 270, 135}, [3]float64{135, 315, 180},
		[3]float64{180, 0, 180}, [3]float64{180, 45, -135}, [3]float64{180, 90, -90}, [3]float64{180, 135, -45}, [3]float64{180, 180, 0}, [3]float64{180, 225, 45}, [3]float64{180, 270, 90}, [3]float64{180, 315, 135},
		[3]float64{225, 0, 135}, [3]float64{225, 45, 180}, [3]float64{225, 90, -135}, [3]float64{225, 135, -90}, [3]float64{225, 180, -45}, [3]float64{225, 225, 0}, [3]float64{225, 270, 45}, [3]float64{225, 315, 90},
		[3]float64{270, 0, 90}, [3]float64{270, 45, 135}, [3]float64{270, 90, 180}, [3]float64{270, 135, -135}, [3]float64{270, 180, -90}, [3]float64{270, 225, -45}, [3]float64{270, 270, 0}, [3]float64{270, 315, 45},
		[3]float64{315, 0, 45}, [3]float64{315, 45, 90}, [3]float64{315, 90, 135}, [3]float64{315, 135, 180}, [3]float64{315, 180, -135}, [3]float64{315, 225, -90}, [3]float64{315, 270, -45}, [3]float64{315, 315, 0},
	}

	for _, test := range tests {
		heading := Heading(test[2], test[1])
		if heading != test[0] {
			t.Errorf("Heading(%.0f, %.0f) = (%.0f); want (%.0f)", test[2], test[1], heading, test[0])
		}
	}
}
